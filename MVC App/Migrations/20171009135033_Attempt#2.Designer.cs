// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Models;
using System;

namespace ProjectReact.Migrations
{
    [DbContext(typeof(FutureDBContext))]
    [Migration("20171009135033_Attempt#2")]
    partial class Attempt2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookmarkListId");

                    b.Property<int>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("BookmarkListId");

                    b.HasIndex("ProductsId");

                    b.ToTable("Bookmark");
                });

            modelBuilder.Entity("Models.BookmarkList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserUsername");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookmarkList");
                });

            modelBuilder.Entity("Models.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Models.Brands_Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrandsId");

                    b.Property<int>("CategoriesId");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("Brands_Categories");
                });

            modelBuilder.Entity("Models.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.Factuur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactuurBon");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Factuur");
                });

            modelBuilder.Entity("Models.FactuurList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("UserId");

                    b.Property<int>("UserUsername");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FactuurList");
                });

            modelBuilder.Entity("Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Aantal");

                    b.Property<int>("Amount_Sold");

                    b.Property<int>("BrandsId");

                    b.Property<int>("CategoriesId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<string>("Short_Description");

                    b.Property<string>("Specs");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.RecommendedSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gebruik");

                    b.Property<int>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("RecommendedSystems");
                });

            modelBuilder.Entity("Models.UnregisteredFactuur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactuurBon");

                    b.Property<int>("UnregisteredUserId");

                    b.HasKey("Id");

                    b.HasIndex("UnregisteredUserId");

                    b.ToTable("UnregisteredFactuur");
                });

            modelBuilder.Entity("Models.UnregisteredUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BirthDate");

                    b.Property<string>("EMail");

                    b.Property<string>("FirstName");

                    b.Property<string>("Huisnummer");

                    b.Property<string>("LastName");

                    b.Property<int>("Phonenumber");

                    b.Property<string>("Postcode");

                    b.Property<string>("Stad");

                    b.Property<string>("Straat");

                    b.HasKey("Id");

                    b.ToTable("UnregisteredUser");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BirthDate");

                    b.Property<string>("EMail");

                    b.Property<string>("FirstName");

                    b.Property<string>("Huisnummer");

                    b.Property<string>("LastName");

                    b.Property<int>("Phonenumber");

                    b.Property<string>("Postcode");

                    b.Property<string>("Stad");

                    b.Property<string>("Straat");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.Bookmark", b =>
                {
                    b.HasOne("Models.BookmarkList", "BookmarkList")
                        .WithMany()
                        .HasForeignKey("BookmarkListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.BookmarkList", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.Brands_Categories", b =>
                {
                    b.HasOne("Models.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Factuur", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.FactuurList", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.Products", b =>
                {
                    b.HasOne("Models.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.RecommendedSystems", b =>
                {
                    b.HasOne("Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.UnregisteredFactuur", b =>
                {
                    b.HasOne("Models.UnregisteredUser", "UnregisteredUser")
                        .WithMany()
                        .HasForeignKey("UnregisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
