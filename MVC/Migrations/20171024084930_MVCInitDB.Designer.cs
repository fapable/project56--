// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MVC.Models;
using System;

namespace MVC.Migrations
{
    [DbContext(typeof(FutureDBContext))]
    [Migration("20171024084930_MVCInitDB")]
    partial class MVCInitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("MVC.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MVC.Models.Brand_Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrandId");

                    b.Property<int>("CategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Brands_Categories");
                });

            modelBuilder.Entity("MVC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MVC.Models.Factuur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactuurBon");

                    b.Property<int>("GebruikerId");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.ToTable("Facturen");
                });

            modelBuilder.Entity("MVC.Models.FactuurLijsten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GebruikerId");

                    b.Property<int>("GebruikerUsername");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.ToTable("FactuurLijsten");
                });

            modelBuilder.Entity("MVC.Models.Favorieten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FavorietenLijstenId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("FavorietenLijstenId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorieten");
                });

            modelBuilder.Entity("MVC.Models.FavorietenLijsten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GebruikerId");

                    b.Property<string>("GebruikersUsername");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.ToTable("FavorietenLijsten");
                });

            modelBuilder.Entity("MVC.Models.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Achternaam");

                    b.Property<string>("EMail");

                    b.Property<string>("Geboortedatum");

                    b.Property<string>("Huisnummer");

                    b.Property<string>("Postcode");

                    b.Property<string>("Stad");

                    b.Property<string>("Straat");

                    b.Property<int>("Telefoonnummer");

                    b.Property<string>("Username");

                    b.Property<string>("Voornaam");

                    b.HasKey("Id");

                    b.ToTable("gebruikers");
                });

            modelBuilder.Entity("MVC.Models.Laptop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount_Sold");

                    b.Property<string>("Description");

                    b.Property<string>("Image_Path");

                    b.Property<float>("Price");

                    b.Property<string>("Short_Description");

                    b.Property<int>("Stock");

                    b.HasKey("Id");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("MVC.Models.OngeregistreerdeFactuur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactuurBon");

                    b.Property<int>("OngeregistreerdeGebruikerId");

                    b.HasKey("Id");

                    b.HasIndex("OngeregistreerdeGebruikerId");

                    b.ToTable("OngeregistreerdeFacturen");
                });

            modelBuilder.Entity("MVC.Models.OngeregistreerdeGebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Achternaam");

                    b.Property<string>("EMail");

                    b.Property<string>("Huisnummer");

                    b.Property<string>("Postcode");

                    b.Property<string>("Stad");

                    b.Property<string>("Straat");

                    b.Property<int>("Telefoonnummer");

                    b.Property<string>("Voornaam");

                    b.HasKey("Id");

                    b.ToTable("OngeregistreerdeGebruikers");
                });

            modelBuilder.Entity("MVC.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount_Sold");

                    b.Property<int>("BrandId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Compatibility");

                    b.Property<string>("Description");

                    b.Property<float>("Price");

                    b.Property<string>("Short_Description");

                    b.Property<string>("Specification");

                    b.Property<int>("Stock");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MVC.Models.RecommendedSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gebruik");

                    b.Property<string>("Image_Path");

                    b.Property<string>("Level");

                    b.Property<string>("Long_Description");

                    b.Property<int?>("ProductId");

                    b.Property<int>("ProductsId");

                    b.Property<string>("Short_Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("RecommendedSystems");
                });

            modelBuilder.Entity("MVC.Models.Brand_Categories", b =>
                {
                    b.HasOne("MVC.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVC.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVC.Models.Factuur", b =>
                {
                    b.HasOne("MVC.Models.Gebruiker", "Gebruiker")
                        .WithMany()
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVC.Models.FactuurLijsten", b =>
                {
                    b.HasOne("MVC.Models.Gebruiker", "Gebruiker")
                        .WithMany()
                        .HasForeignKey("GebruikerId");
                });

            modelBuilder.Entity("MVC.Models.Favorieten", b =>
                {
                    b.HasOne("MVC.Models.FavorietenLijsten", "FavorietenLijsten")
                        .WithMany()
                        .HasForeignKey("FavorietenLijstenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("MVC.Models.FavorietenLijsten", b =>
                {
                    b.HasOne("MVC.Models.Gebruiker", "Gebruiker")
                        .WithMany()
                        .HasForeignKey("GebruikerId");
                });

            modelBuilder.Entity("MVC.Models.OngeregistreerdeFactuur", b =>
                {
                    b.HasOne("MVC.Models.OngeregistreerdeGebruiker", "OngeregistreerdeGebruiker")
                        .WithMany()
                        .HasForeignKey("OngeregistreerdeGebruikerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVC.Models.Product", b =>
                {
                    b.HasOne("MVC.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVC.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVC.Models.RecommendedSystem", b =>
                {
                    b.HasOne("MVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
